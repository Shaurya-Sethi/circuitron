"""
Tools for the Circuitron agents.
Contains calculation tools and other utilities that agents can use.
"""

from agents import function_tool
import subprocess
import textwrap
import json
from .models import CalcResult


@function_tool
async def execute_calculation(
    calculation_id: str,
    description: str,
    code: str,
) -> CalcResult:
    """
    Execute pure-Python maths code *generated by the LLM* in an isolated Docker container.

    Args:
        calculation_id: Correlates this request to its tool response.
        description: What this calculation is intended to compute.
        code: Python source (generated by the LLM) that prints the final value.
    Returns:
        CalcResult with stdout, stderr, and success flag.
    """
    safe_code = textwrap.dedent(code)
    docker_cmd = [
        "docker", "run", "--rm",
        "--network", "none",
        "--memory", "128m",
        "--pids-limit", "64",
        "python:3.12-slim",
        "python", "-c", safe_code,
    ]
    try:
        proc = subprocess.run(docker_cmd, capture_output=True, text=True, timeout=15)
        return CalcResult(
            calculation_id=calculation_id,
            success=proc.returncode == 0,
            stdout=proc.stdout.strip(),
            stderr=proc.stderr.strip(),
        )
    except Exception as e:
        return CalcResult(
            calculation_id=calculation_id,
            success=False,
            stderr=str(e),
        )


@function_tool
async def search_kicad_libraries(query: str) -> str:
    """Search KiCad libraries using skidl.search."""
    script = textwrap.dedent(f"""
import json, skidl
parts = skidl.search({query!r})
results = []
if parts:
    for p in parts:
        results.append({{"name": p.name, "library": getattr(p, "lib", ""), "footprint": getattr(p, "footprint", None), "description": getattr(p, "description", None)}})
print(json.dumps(results))
""")
    docker_cmd = [
        "docker", "run", "--rm", "--network", "none", "--memory", "512m", "--pids-limit", "256",
        "ghcr.io/circuitron/kicad-skidl:latest",
        "python", "-c", script
    ]
    try:
        proc = subprocess.run(docker_cmd, capture_output=True, text=True, timeout=30)
        return proc.stdout.strip()
    except Exception as e:
        return json.dumps({{"error": str(e)}})
