Question: What would happen if I remove the kicad footprint search tool from the tools list available to the part finder and adjust the prompt for this agent just a little to remove references to include footprint searches? 

I know the pydantic model for the agent now includes footprint info, but will it default to none in case I do what I said? Will it negatively affect the pipeline and result in crashes? 

I ask these questions, because the queries that the part finder is constructing to find footprints are not able to find the footprints associated with the parts found - probably because it’s too much for the agent to accomplish? As a result, the agent is hallucinating the names of footprints and thus the final code generated is unable to be executed. 

Earlier, not  intentionally - The pydantic model for FoundFootprint was actually unused a few commits ago and the part finder wasn’t explicitly instructed properly to also look for footprints and also the final part finder output model would always have footprints as null. This would actually result in the generation of codes that could be executed to at least obtain netlists and SVG images. 

What do you think we should do? I want to restore functionality so I can show my project to my mentor at my internship.

Answer:

Based on the repository code:

The PartFinder agent is configured with both symbol and footprint search tools. This is visible in create_partfinder_agent() where search_kicad_libraries and search_kicad_footprints are listed as tools.

PartFinderOutput defines found_components and found_footprints with default_factory=list, so if no footprints are provided, the model will simply use an empty list rather than raising an error.

SelectedPart within PartSelectionOutput allows footprint to be None.

The tests exercise the pipeline with a default PartFinderOutput() (which has no footprints) and the pipeline runs without errors

The OpenAI Agents documentation explains that when an agent has an output_type, it keeps looping until the LLM provides output matching that schema. Because PartFinderOutput has defaults for optional fields, omitting found_footprints will still satisfy the schema.

Therefore, if you remove the search_kicad_footprints tool and edit the prompt to no longer instruct footprint searches:

The agent will still produce a valid PartFinderOutput, but found_footprints will simply be an empty list.

Downstream agents already handle missing footprint information (tests show the pipeline working with empty PartFinderOutput), so removing that tool will not crash the pipeline.

You will lose automated footprint suggestions, meaning any footprints must be manually chosen or supplied later in the process.

This approach restores the earlier behavior where footprints are effectively absent. The pipeline should continue to produce netlists and SVGs as before, only without footprint data.


